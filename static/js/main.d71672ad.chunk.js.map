{"version":3,"sources":["Api/Api.js","Components/Results/Results.js","Components/LoadIndicator/LoadIndicator.js","Components/Autocomplete/Autocomplete.js","serviceWorker.js","index.js"],"names":["SearchApi","keyword","axios","get","replace","Results","_this","this","result","props","data","results","docs","cls","concat","length","react_default","a","createElement","className","map","res","key","index","name","category","location","bookingId","substr","indexOf","loc","region","country","Component","LoadIndicator","Autocomplete","state","term","loading","onKeyup","debounce","trim","setState","then","response","catch","error","message","_this2","htmlFor","id","placeholder","onKeyUp","evt","target","onChange","value","autoComplete","Components_LoadIndicator_LoadIndicator","Components_Results_Results","fn","delay","timeoutHandler","_this3","clearTimeout","setTimeout","call","Boolean","window","hostname","match","ReactDOM","render","Components_Autocomplete_Autocomplete","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d71672ad.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst searchEndpoint = \"https://www.rentalcars.com/FTSAutocomplete.do?solrIndex=fts_en&solrRows=6&solrTerm=KEY_WORD\";\r\n\r\nconst SearchApi = (keyword) => {\r\n    return axios.get(searchEndpoint.replace('KEY_WORD', keyword));\r\n};\r\nexport default SearchApi;","import React, { Component } from 'react';\r\nimport './Results.css';\r\n\r\nclass Results extends Component{\r\n    render (){\r\n        const result = this.props.data ? this.props.data.results.docs : [];\r\n        const cls = \"result-wrapper\".concat(!result.length ? ' no-result' : '');\r\n        return (<div className={cls}>\r\n            {\r\n                result.map((res) => <div key={res.index} className=\"result\">\r\n                       <span>\r\n                            <div>{res.name} {this.category(res)}</div>\r\n                            {this.location(res)}\r\n                        </span>\r\n                        <hr></hr>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>);\r\n    }\r\n\r\n    category(res){\r\n        if(!res.bookingId) return '';\r\n\r\n        return ''.concat('(', res.bookingId.substr(0, res.bookingId.indexOf('-')), ')');\r\n    }\r\n    location(res){\r\n        let loc = '';\r\n        if(res.region)\r\n            loc =loc.concat(res.region); \r\n        if(res.country){\r\n            loc = loc.concat(', ', res.country);\r\n        }\r\n        return loc;\r\n    }\r\n}\r\n\r\nexport default Results;","import React, { Component } from 'react';\r\nimport './LoadIndicator.css';\r\n\r\nclass LoadIndicator extends Component {\r\n    render() { \r\n        return ( <div className=\"loader\"></div> );\r\n    }\r\n}\r\n \r\nexport default LoadIndicator;","import React, { Component } from 'react';\nimport './Autocomplete.css';\nimport SearchApi from  '../../Api/Api';\nimport Results from '../Results/Results';\nimport LoadIndicator from '../LoadIndicator/LoadIndicator';\n\nclass Autocomplete extends Component{\n  state = {\n    term : '',\n    result : null,\n    loading : false\n  };\n\n  render(){\n    return (\n      <div className=\"searchbox\">\n        <h2>Where are you going?</h2>\n        <label htmlFor=\"search\">Pick-up Location</label>\n        <div className=\"search-wrapper\">\n          <input id=\"search\" className=\"search\" placeholder=\"city, airport, station, region and district...\"\n                onKeyUp={ (evt) => this.onKeyup(evt.target)}\n                onChange={ (evt) => this.onChange(evt.target)}\n                value={this.state.term}\n                autoComplete=\"off\"/>\n          { this.state.loading && <LoadIndicator/>}\n        </div>\n        <Results data={this.state.result}/>\n      </div>\n    );\n  }\n\n  onChange(target){\n    this.setState({term : target.value})\n  }\n\n  onKeyup = this.debounce(()=>{\n    if(this.state.term.trim().length >= 2){\n      this.setState({loading : true});\n      SearchApi(this.state.term).then((response) => {\n        this.setState({loading : false, result : (response.data !== \"\") ? response.data : {\n          results:{\n            docs:[{\n              index: 1,\n              name: \"No results found\"\n            }]\n          }\n        }});\n      }).catch( error => this.setState({loading : false, result : {\n        results:{\n          docs:[{\n            index: 1,\n            name: error.message\n          }]\n        }\n      }}));\n    } else {\n      this.setState({result : null});\n    }\n  }, 1000);\n\n  debounce(fn, delay){\n    let timeoutHandler;\n\n    return (target) => {\n\n        this.onChange(target);\n\n        clearTimeout(timeoutHandler);\n\n        timeoutHandler = setTimeout(() => {\n            fn.call(this);\n            timeoutHandler = null;\n\n        }, delay);\n    }\n  }\n}\n\nexport default Autocomplete;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Autocomplete from './Components/Autocomplete/Autocomplete';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Autocomplete />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}